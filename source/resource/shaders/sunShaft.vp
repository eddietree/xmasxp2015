/*
"uniform mat4 modelMatrix;",
"uniform mat4 modelViewMatrix;",
"uniform mat4 projectionMatrix;",
"uniform mat4 viewMatrix;",
"uniform mat3 normalMatrix;",
"uniform vec3 cameraPosition;",
*/

uniform float uTime;
varying vec3 vRandData;
varying vec2 vUV;

void main() {

	float radius = 20.0;
	vec3 posRoot = vec3(0.0,20.0,0.0);
	float angleMax = 0.1;

	vec3 randData = normal;
	float sinVal = sin( uTime + randData.x * 50.0 ) * 0.5 + 0.5;
	float angle = -3.14159 + mix(-1.0, 1.0, sinVal) * angleMax;

	vec3 pos = position + vec3(-0.5,0.0,0.0);
	pos.xy *= vec2(0.3,1.0) * radius;
	
	float x = pos.x;
	float y = pos.y;
	float xRot = x * cos(angle) - y * sin(angle);
	float yRot = y * cos(angle) + x * sin(angle);
	pos.xy = vec2(xRot, yRot);
	pos.xyz += posRoot + vec3( (randData.y*2.0-1.0)*1.0, 0.0, 0.0);

	vUV = position.xy;
	vRandData =  randData;
  	gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.0);
}