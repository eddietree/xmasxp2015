uniform float uTime;

varying float vTime;
varying float vDistToCamera;
varying vec3 vPosWorld;

void main() {

	vec3 pos = position;

	vec3 posWorld = (modelMatrix * vec4(pos,1.0)).xyz;
	vec3 vecToCamera = cameraPosition - posWorld;
	float distToCamera = length(vecToCamera);

	//float fogCoeff = clamp(distToCamera*0.003,0.0,1.0);
	float fogCoeff = (1.0-smoothstep( 10.0, 100.0, distToCamera ));
	gl_PointSize = fogCoeff * 15.0;
	
	vTime = uTime;
	vPosWorld = posWorld;
	vDistToCamera = distToCamera;

  	gl_Position = projectionMatrix *
                modelViewMatrix *
                vec4(pos,1.0);
}